{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","className","href","this","props","totalCounter","Component","Counter","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","badgeClasses","value","Counters","onReset","counters","map","key","App","handleDelete","counterId","filter","setState","handleIncrement","index","indexOf","handleReset","c","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oPAkBeA,G,kNAfdC,MAAQ,G,uDAEP,OACC,yBAAKC,UAAU,gCACd,uBAAGC,KAAK,QAAQD,UAAU,gBAA1B,uBAEC,0BAAMA,UAAU,oCACdE,KAAKC,MAAMC,oB,GARGC,cCsCNC,E,uKArCJ,IAAD,OACR,OACC,6BACC,0BAAMN,UAAWE,KAAKK,mBACpBL,KAAKM,eAEP,4BACCC,QAAS,kBAAM,EAAKN,MAAMO,YAAY,EAAKP,MAAMQ,UACjDX,UAAU,4BAFX,aAOA,4BACCS,QAAS,WACR,EAAKN,MAAMS,SAAS,EAAKT,MAAMQ,QAAQE,KAExCb,UAAU,6BAJX,a,wCAaF,IAAIc,EAAe,mBAEnB,OADAA,GAA6C,IAA7BZ,KAAKC,MAAMQ,QAAQI,MAAc,UAAY,Y,oCAI/C,IACNA,EAAUb,KAAKC,MAAMQ,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAlCVV,aCwBPW,E,uKAtBJ,IAAD,OACR,OACC,6BACC,4BACCP,QAASP,KAAKC,MAAMc,QACpBjB,UAAU,8BAFX,SAMCE,KAAKC,MAAMe,SAASC,KAAI,SAACR,GAAD,OACxB,kBAAC,EAAD,CACCS,IAAKT,EAAQE,GACbF,QAASA,EACTD,YAAa,EAAKP,MAAMO,YACxBE,SAAU,EAAKT,MAAMS,mB,GAfJP,aCuDRgB,E,4MApDbtB,MAAQ,CACNmB,SAAU,CACR,CAAEL,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,K,EAIpBO,aAAe,SAACC,GACd,IAAML,EAAW,EAAKnB,MAAMmB,SAASM,QACnC,SAACb,GAAD,OAAaA,EAAQE,KAAOU,KAG9B,EAAKE,SAAS,CACZP,c,EAIJQ,gBAAkB,SAACf,GACjB,IAAMO,EAAQ,YAAO,EAAKnB,MAAMmB,UAC1BS,EAAQT,EAASU,QAAQjB,GAC/BO,EAASS,GAAT,eAAuBhB,GACvBO,EAASS,GAAOZ,QAEhB,EAAKU,SAAS,CAAEP,c,EAGlBW,YAAc,WACZ,EAAK9B,MAAMmB,SAASC,KAAI,SAACW,GAEvB,OADAA,EAAEf,MAAQ,EACHe,M,uDAKT,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAQ3B,aAAcF,KAAKH,MAAMmB,SAASM,QAAO,SAAAM,GAAC,OAAIA,EAAEf,MAAQ,KAAGiB,SACnE,0BAAMhC,UAAU,aACd,kBAAC,EAAD,CACEiB,QAASf,KAAK2B,YACdnB,YAAaR,KAAKwB,gBAC3Bd,SAAUV,KAAKoB,aACfJ,SAAUhB,KAAKH,MAAMmB,iB,GA7CNb,aCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.bca22e11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass NavBar extends Component {\n\tstate = {};\n\trender() {\n\t\treturn (\n\t\t\t<nav className=\"navbar navbar-light bg-light\">\n\t\t\t\t<a href=\"/home\" className=\"navbar-brand\">\n\t\t\t\t\tZartash Zulfiqar&nbsp;\n\t\t\t\t\t<span className=\"badge badge-pill badge-secondary\">\n\t\t\t\t\t\t{this.props.totalCounter}\n\t\t\t\t\t</span>\n\t\t\t\t</a>\n\t\t\t</nav>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<span className={this.getBadgeClasses()}>\n\t\t\t\t\t{this.formatCount()}\n\t\t\t\t</span>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => this.props.onIncrement(this.props.counter)}\n\t\t\t\t\tclassName=\"btn btn-secondary btn-sm\"\n\t\t\t\t>\n\t\t\t\t\tIncrement\n\t\t\t\t</button>\n\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tthis.props.onDelete(this.props.counter.id);\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"btn btn-danger btn-sm m-2\"\n\t\t\t\t>\n\t\t\t\t\tDelete\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\t}\n\n\tgetBadgeClasses() {\n\t\tlet badgeClasses = \"badge m-2 badge-\";\n\t\tbadgeClasses += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n\t\treturn badgeClasses;\n\t}\n\n\tformatCount() {\n\t\tconst { value } = this.props.counter;\n\t\treturn value === 0 ? \"Zero\" : value;\n\t}\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport Counter from \"./counter\";\n\nclass Counters extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tonClick={this.props.onReset}\n\t\t\t\t\tclassName=\"btn btn-primary btn-sm m-2\"\n\t\t\t\t>\n\t\t\t\t\tReset\n\t\t\t\t</button>\n\t\t\t\t{this.props.counters.map((counter) => (\n\t\t\t\t\t<Counter\n\t\t\t\t\t\tkey={counter.id}\n\t\t\t\t\t\tcounter={counter}\n\t\t\t\t\t\tonIncrement={this.props.onIncrement}\n\t\t\t\t\t\tonDelete={this.props.onDelete}\n\t\t\t\t\t></Counter>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Counters;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\n\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 3 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter(\n      (counter) => counter.id !== counterId\n    );\n\n    this.setState({\n      counters,\n    });\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar totalCounter={this.state.counters.filter(c => c.value > 0).length} />\n        <main className=\"container\">\n          <Counters\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n\t\t\tonDelete={this.handleDelete}\n\t\t\tcounters={this.state.counters}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}